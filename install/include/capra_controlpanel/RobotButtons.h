// Generated by gencpp from file capra_controlpanel/RobotButtons.msg
// DO NOT EDIT!


#ifndef CAPRA_CONTROLPANEL_MESSAGE_ROBOTBUTTONS_H
#define CAPRA_CONTROLPANEL_MESSAGE_ROBOTBUTTONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace capra_controlpanel
{
template <class ContainerAllocator>
struct RobotButtons_
{
  typedef RobotButtons_<ContainerAllocator> Type;

  RobotButtons_()
    : fan(false)
    , imu(false)
    , camera(false)
    , gps(false)
    , switch(false)
    , lights(false)
    , rangefinder(false)
    , estopmanual(false)
    , estopremote(false)
    , mode()  {
    }
  RobotButtons_(const ContainerAllocator& _alloc)
    : fan(false)
    , imu(false)
    , camera(false)
    , gps(false)
    , switch(false)
    , lights(false)
    , rangefinder(false)
    , estopmanual(false)
    , estopremote(false)
    , mode(_alloc)  {
    }



   typedef uint8_t _fan_type;
  _fan_type fan;

   typedef uint8_t _imu_type;
  _imu_type imu;

   typedef uint8_t _camera_type;
  _camera_type camera;

   typedef uint8_t _gps_type;
  _gps_type gps;

   typedef uint8_t _switch_type;
  _switch_type switch;

   typedef uint8_t _lights_type;
  _lights_type lights;

   typedef uint8_t _rangefinder_type;
  _rangefinder_type rangefinder;

   typedef uint8_t _estopmanual_type;
  _estopmanual_type estopmanual;

   typedef uint8_t _estopremote_type;
  _estopremote_type estopremote;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;




  typedef boost::shared_ptr< ::capra_controlpanel::RobotButtons_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capra_controlpanel::RobotButtons_<ContainerAllocator> const> ConstPtr;

}; // struct RobotButtons_

typedef ::capra_controlpanel::RobotButtons_<std::allocator<void> > RobotButtons;

typedef boost::shared_ptr< ::capra_controlpanel::RobotButtons > RobotButtonsPtr;
typedef boost::shared_ptr< ::capra_controlpanel::RobotButtons const> RobotButtonsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capra_controlpanel::RobotButtons_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace capra_controlpanel

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'capra_controlpanel': ['/home/capra/Ibex/src/capra_controlpanel/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capra_controlpanel::RobotButtons_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capra_controlpanel::RobotButtons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capra_controlpanel::RobotButtons_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bdaf8cf1ba24dbdb8192b744a7ad390";
  }

  static const char* value(const ::capra_controlpanel::RobotButtons_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bdaf8cf1ba24dbdULL;
  static const uint64_t static_value2 = 0xb8192b744a7ad390ULL;
};

template<class ContainerAllocator>
struct DataType< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capra_controlpanel/RobotButtons";
  }

  static const char* value(const ::capra_controlpanel::RobotButtons_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool fan\n\
bool imu\n\
bool camera\n\
bool gps\n\
bool switch\n\
bool lights\n\
bool rangefinder\n\
bool estopmanual\n\
bool estopremote\n\
string mode\n\
";
  }

  static const char* value(const ::capra_controlpanel::RobotButtons_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fan);
      stream.next(m.imu);
      stream.next(m.camera);
      stream.next(m.gps);
      stream.next(m.switch);
      stream.next(m.lights);
      stream.next(m.rangefinder);
      stream.next(m.estopmanual);
      stream.next(m.estopremote);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RobotButtons_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capra_controlpanel::RobotButtons_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capra_controlpanel::RobotButtons_<ContainerAllocator>& v)
  {
    s << indent << "fan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fan);
    s << indent << "imu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu);
    s << indent << "camera: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.camera);
    s << indent << "gps: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps);
    s << indent << "switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.switch);
    s << indent << "lights: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lights);
    s << indent << "rangefinder: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rangefinder);
    s << indent << "estopmanual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estopmanual);
    s << indent << "estopremote: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estopremote);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPRA_CONTROLPANEL_MESSAGE_ROBOTBUTTONS_H
