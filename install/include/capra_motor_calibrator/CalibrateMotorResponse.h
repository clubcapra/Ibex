// Generated by gencpp from file capra_motor_calibrator/CalibrateMotorResponse.msg
// DO NOT EDIT!


#ifndef CAPRA_MOTOR_CALIBRATOR_MESSAGE_CALIBRATEMOTORRESPONSE_H
#define CAPRA_MOTOR_CALIBRATOR_MESSAGE_CALIBRATEMOTORRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace capra_motor_calibrator
{
template <class ContainerAllocator>
struct CalibrateMotorResponse_
{
  typedef CalibrateMotorResponse_<ContainerAllocator> Type;

  CalibrateMotorResponse_()
    : calibration_values()  {
    }
  CalibrateMotorResponse_(const ContainerAllocator& _alloc)
    : calibration_values(_alloc)  {
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _calibration_values_type;
  _calibration_values_type calibration_values;




  typedef boost::shared_ptr< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CalibrateMotorResponse_

typedef ::capra_motor_calibrator::CalibrateMotorResponse_<std::allocator<void> > CalibrateMotorResponse;

typedef boost::shared_ptr< ::capra_motor_calibrator::CalibrateMotorResponse > CalibrateMotorResponsePtr;
typedef boost::shared_ptr< ::capra_motor_calibrator::CalibrateMotorResponse const> CalibrateMotorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace capra_motor_calibrator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f60317c0e893449b476488363ffc6304";
  }

  static const char* value(const ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf60317c0e893449bULL;
  static const uint64_t static_value2 = 0x476488363ffc6304ULL;
};

template<class ContainerAllocator>
struct DataType< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capra_motor_calibrator/CalibrateMotorResponse";
  }

  static const char* value(const ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] calibration_values\n\
\n\
";
  }

  static const char* value(const ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.calibration_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CalibrateMotorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capra_motor_calibrator::CalibrateMotorResponse_<ContainerAllocator>& v)
  {
    s << indent << "calibration_values[]" << std::endl;
    for (size_t i = 0; i < v.calibration_values.size(); ++i)
    {
      s << indent << "  calibration_values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.calibration_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPRA_MOTOR_CALIBRATOR_MESSAGE_CALIBRATEMOTORRESPONSE_H
