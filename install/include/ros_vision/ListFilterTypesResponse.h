// Generated by gencpp from file ros_vision/ListFilterTypesResponse.msg
// DO NOT EDIT!


#ifndef ROS_VISION_MESSAGE_LISTFILTERTYPESRESPONSE_H
#define ROS_VISION_MESSAGE_LISTFILTERTYPESRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_vision/FilterList.h>

namespace ros_vision
{
template <class ContainerAllocator>
struct ListFilterTypesResponse_
{
  typedef ListFilterTypesResponse_<ContainerAllocator> Type;

  ListFilterTypesResponse_()
    : filter_list()  {
    }
  ListFilterTypesResponse_(const ContainerAllocator& _alloc)
    : filter_list(_alloc)  {
    }



   typedef  ::ros_vision::FilterList_<ContainerAllocator>  _filter_list_type;
  _filter_list_type filter_list;




  typedef boost::shared_ptr< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ListFilterTypesResponse_

typedef ::ros_vision::ListFilterTypesResponse_<std::allocator<void> > ListFilterTypesResponse;

typedef boost::shared_ptr< ::ros_vision::ListFilterTypesResponse > ListFilterTypesResponsePtr;
typedef boost::shared_ptr< ::ros_vision::ListFilterTypesResponse const> ListFilterTypesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'ros_vision': ['/home/capra/Ibex/src/ros_vision/msg', '/home/capra/Ibex/src/ros_vision/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48ca7f8131dcc85f21cec2237f55b37d";
  }

  static const char* value(const ::ros_vision::ListFilterTypesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48ca7f8131dcc85fULL;
  static const uint64_t static_value2 = 0x21cec2237f55b37dULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vision/ListFilterTypesResponse";
  }

  static const char* value(const ::ros_vision::ListFilterTypesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FilterList filter_list\n\
\n\
================================================================================\n\
MSG: ros_vision/FilterList\n\
Filter[] filters\n\
================================================================================\n\
MSG: ros_vision/Filter\n\
string name\n\
string type\n\
string description\n\
IODescriptor[] inputs\n\
IODescriptor[] outputs\n\
Parameter[] parameters\n\
\n\
================================================================================\n\
MSG: ros_vision/IODescriptor\n\
string name\n\
string topic\n\
string type\n\
================================================================================\n\
MSG: ros_vision/Parameter\n\
string name\n\
string description\n\
string type\n\
string default\n\
string min\n\
string max\n\
";
  }

  static const char* value(const ::ros_vision::ListFilterTypesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filter_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ListFilterTypesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vision::ListFilterTypesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vision::ListFilterTypesResponse_<ContainerAllocator>& v)
  {
    s << indent << "filter_list: ";
    s << std::endl;
    Printer< ::ros_vision::FilterList_<ContainerAllocator> >::stream(s, indent + "  ", v.filter_list);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VISION_MESSAGE_LISTFILTERTYPESRESPONSE_H
