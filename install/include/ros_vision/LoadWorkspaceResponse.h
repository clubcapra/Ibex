// Generated by gencpp from file ros_vision/LoadWorkspaceResponse.msg
// DO NOT EDIT!


#ifndef ROS_VISION_MESSAGE_LOADWORKSPACERESPONSE_H
#define ROS_VISION_MESSAGE_LOADWORKSPACERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_vision/Workspace.h>

namespace ros_vision
{
template <class ContainerAllocator>
struct LoadWorkspaceResponse_
{
  typedef LoadWorkspaceResponse_<ContainerAllocator> Type;

  LoadWorkspaceResponse_()
    : workspace()  {
    }
  LoadWorkspaceResponse_(const ContainerAllocator& _alloc)
    : workspace(_alloc)  {
    }



   typedef  ::ros_vision::Workspace_<ContainerAllocator>  _workspace_type;
  _workspace_type workspace;




  typedef boost::shared_ptr< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LoadWorkspaceResponse_

typedef ::ros_vision::LoadWorkspaceResponse_<std::allocator<void> > LoadWorkspaceResponse;

typedef boost::shared_ptr< ::ros_vision::LoadWorkspaceResponse > LoadWorkspaceResponsePtr;
typedef boost::shared_ptr< ::ros_vision::LoadWorkspaceResponse const> LoadWorkspaceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'ros_vision': ['/home/capra/Ibex/src/ros_vision/msg', '/home/capra/Ibex/src/ros_vision/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fe033c7c690050d20ac47435e8e465c";
  }

  static const char* value(const ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fe033c7c690050dULL;
  static const uint64_t static_value2 = 0x20ac47435e8e465cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vision/LoadWorkspaceResponse";
  }

  static const char* value(const ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Workspace workspace\n\
\n\
================================================================================\n\
MSG: ros_vision/Workspace\n\
string name\n\
IODescriptor[] input_topics\n\
FilterGroup[] filter_groups\n\
\n\
================================================================================\n\
MSG: ros_vision/IODescriptor\n\
string name\n\
string topic\n\
string type\n\
================================================================================\n\
MSG: ros_vision/FilterGroup\n\
string name\n\
Filter[] filters\n\
================================================================================\n\
MSG: ros_vision/Filter\n\
string name\n\
string type\n\
string description\n\
IODescriptor[] inputs\n\
IODescriptor[] outputs\n\
Parameter[] parameters\n\
\n\
================================================================================\n\
MSG: ros_vision/Parameter\n\
string name\n\
string description\n\
string type\n\
string default\n\
string min\n\
string max\n\
";
  }

  static const char* value(const ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.workspace);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LoadWorkspaceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vision::LoadWorkspaceResponse_<ContainerAllocator>& v)
  {
    s << indent << "workspace: ";
    s << std::endl;
    Printer< ::ros_vision::Workspace_<ContainerAllocator> >::stream(s, indent + "  ", v.workspace);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VISION_MESSAGE_LOADWORKSPACERESPONSE_H
