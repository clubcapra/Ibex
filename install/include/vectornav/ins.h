// Generated by gencpp from file vectornav/ins.msg
// DO NOT EDIT!


#ifndef VECTORNAV_MESSAGE_INS_H
#define VECTORNAV_MESSAGE_INS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace vectornav
{
template <class ContainerAllocator>
struct ins_
{
  typedef ins_<ContainerAllocator> Type;

  ins_()
    : header()
    , Time(0.0)
    , Week(0)
    , Status(0)
    , RPY()
    , LLA()
    , NedVel()
    , AttUncerainty(0.0)
    , PosUncerainty(0.0)
    , VelUncerainty(0.0)  {
    }
  ins_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Time(0.0)
    , Week(0)
    , Status(0)
    , RPY(_alloc)
    , LLA(_alloc)
    , NedVel(_alloc)
    , AttUncerainty(0.0)
    , PosUncerainty(0.0)
    , VelUncerainty(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _Time_type;
  _Time_type Time;

   typedef uint16_t _Week_type;
  _Week_type Week;

   typedef uint16_t _Status_type;
  _Status_type Status;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _RPY_type;
  _RPY_type RPY;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _LLA_type;
  _LLA_type LLA;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _NedVel_type;
  _NedVel_type NedVel;

   typedef float _AttUncerainty_type;
  _AttUncerainty_type AttUncerainty;

   typedef float _PosUncerainty_type;
  _PosUncerainty_type PosUncerainty;

   typedef float _VelUncerainty_type;
  _VelUncerainty_type VelUncerainty;


    enum { STATUS_INSUFFICIENT_MOTION = 1u };
     enum { STATUS_INS_OK = 2u };
     enum { STATUS_GPS_FIX_OK = 4u };
     enum { STATUS_SENSOR_ERROR_TIME = 8u };
     enum { STATUS_SENSOR_ERROR_IMU = 16u };
     enum { STATUS_SENSOR_ERROR_MAG = 32u };
     enum { STATUS_SENSOR_ERROR_GPS = 64u };
 

  typedef boost::shared_ptr< ::vectornav::ins_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vectornav::ins_<ContainerAllocator> const> ConstPtr;

}; // struct ins_

typedef ::vectornav::ins_<std::allocator<void> > ins;

typedef boost::shared_ptr< ::vectornav::ins > insPtr;
typedef boost::shared_ptr< ::vectornav::ins const> insConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vectornav::ins_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vectornav::ins_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vectornav

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'vectornav': ['/home/capra/Ibex/src/vectornav/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vectornav::ins_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vectornav::ins_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vectornav::ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vectornav::ins_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vectornav::ins_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vectornav::ins_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vectornav::ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac6f3c29ebbc55e6d11838d54bc5749b";
  }

  static const char* value(const ::vectornav::ins_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac6f3c29ebbc55e6ULL;
  static const uint64_t static_value2 = 0xd11838d54bc5749bULL;
};

template<class ContainerAllocator>
struct DataType< ::vectornav::ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vectornav/ins";
  }

  static const char* value(const ::vectornav::ins_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vectornav::ins_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header       header\n\
float64               Time\n\
uint16                Week\n\
uint16                Status\n\
geometry_msgs/Vector3 RPY\n\
geometry_msgs/Vector3 LLA\n\
geometry_msgs/Vector3 NedVel\n\
float32               AttUncerainty\n\
float32               PosUncerainty\n\
float32               VelUncerainty\n\
\n\
\n\
uint16 STATUS_INSUFFICIENT_MOTION=1\n\
uint16 STATUS_INS_OK=2\n\
uint16 STATUS_GPS_FIX_OK=4\n\
uint16 STATUS_SENSOR_ERROR_TIME=8\n\
uint16 STATUS_SENSOR_ERROR_IMU=16\n\
uint16 STATUS_SENSOR_ERROR_MAG=32\n\
uint16 STATUS_SENSOR_ERROR_GPS=64\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vectornav::ins_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vectornav::ins_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Time);
      stream.next(m.Week);
      stream.next(m.Status);
      stream.next(m.RPY);
      stream.next(m.LLA);
      stream.next(m.NedVel);
      stream.next(m.AttUncerainty);
      stream.next(m.PosUncerainty);
      stream.next(m.VelUncerainty);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ins_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vectornav::ins_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vectornav::ins_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Time: ";
    Printer<double>::stream(s, indent + "  ", v.Time);
    s << indent << "Week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Week);
    s << indent << "Status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Status);
    s << indent << "RPY: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.RPY);
    s << indent << "LLA: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.LLA);
    s << indent << "NedVel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.NedVel);
    s << indent << "AttUncerainty: ";
    Printer<float>::stream(s, indent + "  ", v.AttUncerainty);
    s << indent << "PosUncerainty: ";
    Printer<float>::stream(s, indent + "  ", v.PosUncerainty);
    s << indent << "VelUncerainty: ";
    Printer<float>::stream(s, indent + "  ", v.VelUncerainty);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VECTORNAV_MESSAGE_INS_H
