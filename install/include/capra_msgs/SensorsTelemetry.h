// Generated by gencpp from file capra_msgs/SensorsTelemetry.msg
// DO NOT EDIT!


#ifndef CAPRA_MSGS_MESSAGE_SENSORSTELEMETRY_H
#define CAPRA_MSGS_MESSAGE_SENSORSTELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace capra_msgs
{
template <class ContainerAllocator>
struct SensorsTelemetry_
{
  typedef SensorsTelemetry_<ContainerAllocator> Type;

  SensorsTelemetry_()
    : Fan(false)
    , IMU(false)
    , Camera(false)
    , GPS(false)
    , Switch(false)
    , Lights(false)
    , RangeFinder(false)
    , Tension(0.0)
    , Current(0.0)
    , Temperature(0.0)
    , EstopManual(false)
    , EstopRemote(false)
    , Mode()  {
    }
  SensorsTelemetry_(const ContainerAllocator& _alloc)
    : Fan(false)
    , IMU(false)
    , Camera(false)
    , GPS(false)
    , Switch(false)
    , Lights(false)
    , RangeFinder(false)
    , Tension(0.0)
    , Current(0.0)
    , Temperature(0.0)
    , EstopManual(false)
    , EstopRemote(false)
    , Mode(_alloc)  {
    }



   typedef uint8_t _Fan_type;
  _Fan_type Fan;

   typedef uint8_t _IMU_type;
  _IMU_type IMU;

   typedef uint8_t _Camera_type;
  _Camera_type Camera;

   typedef uint8_t _GPS_type;
  _GPS_type GPS;

   typedef uint8_t _Switch_type;
  _Switch_type Switch;

   typedef uint8_t _Lights_type;
  _Lights_type Lights;

   typedef uint8_t _RangeFinder_type;
  _RangeFinder_type RangeFinder;

   typedef float _Tension_type;
  _Tension_type Tension;

   typedef float _Current_type;
  _Current_type Current;

   typedef float _Temperature_type;
  _Temperature_type Temperature;

   typedef uint8_t _EstopManual_type;
  _EstopManual_type EstopManual;

   typedef uint8_t _EstopRemote_type;
  _EstopRemote_type EstopRemote;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Mode_type;
  _Mode_type Mode;




  typedef boost::shared_ptr< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> const> ConstPtr;

}; // struct SensorsTelemetry_

typedef ::capra_msgs::SensorsTelemetry_<std::allocator<void> > SensorsTelemetry;

typedef boost::shared_ptr< ::capra_msgs::SensorsTelemetry > SensorsTelemetryPtr;
typedef boost::shared_ptr< ::capra_msgs::SensorsTelemetry const> SensorsTelemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capra_msgs::SensorsTelemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace capra_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'capra_msgs': ['/home/capra/Ibex/src/capra_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f34973b0129c8ca57e159449b5e31bb";
  }

  static const char* value(const ::capra_msgs::SensorsTelemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f34973b0129c8caULL;
  static const uint64_t static_value2 = 0x57e159449b5e31bbULL;
};

template<class ContainerAllocator>
struct DataType< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capra_msgs/SensorsTelemetry";
  }

  static const char* value(const ::capra_msgs::SensorsTelemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool Fan\n\
bool IMU\n\
bool Camera\n\
bool GPS\n\
bool Switch\n\
bool Lights\n\
bool RangeFinder\n\
\n\
float32 Tension\n\
float32 Current\n\
float32 Temperature\n\
\n\
bool EstopManual\n\
bool EstopRemote\n\
\n\
string Mode\n\
";
  }

  static const char* value(const ::capra_msgs::SensorsTelemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Fan);
      stream.next(m.IMU);
      stream.next(m.Camera);
      stream.next(m.GPS);
      stream.next(m.Switch);
      stream.next(m.Lights);
      stream.next(m.RangeFinder);
      stream.next(m.Tension);
      stream.next(m.Current);
      stream.next(m.Temperature);
      stream.next(m.EstopManual);
      stream.next(m.EstopRemote);
      stream.next(m.Mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SensorsTelemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capra_msgs::SensorsTelemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capra_msgs::SensorsTelemetry_<ContainerAllocator>& v)
  {
    s << indent << "Fan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Fan);
    s << indent << "IMU: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IMU);
    s << indent << "Camera: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Camera);
    s << indent << "GPS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GPS);
    s << indent << "Switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Switch);
    s << indent << "Lights: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Lights);
    s << indent << "RangeFinder: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RangeFinder);
    s << indent << "Tension: ";
    Printer<float>::stream(s, indent + "  ", v.Tension);
    s << indent << "Current: ";
    Printer<float>::stream(s, indent + "  ", v.Current);
    s << indent << "Temperature: ";
    Printer<float>::stream(s, indent + "  ", v.Temperature);
    s << indent << "EstopManual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EstopManual);
    s << indent << "EstopRemote: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EstopRemote);
    s << indent << "Mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPRA_MSGS_MESSAGE_SENSORSTELEMETRY_H
