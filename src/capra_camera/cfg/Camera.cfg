#!/usr/bin/env python
PACKAGE = "capra_camera"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

exposure_auto_alg_mode = gen.enum([
                       gen.const("Mean",                    int_t, 0, "Mean"),
                       gen.const("FitRange",                int_t, 1, "FitRange")],
                     "ExposureAutoAlgMode")

acquisition_mode = gen.enum([
                       gen.const("Continuous",              int_t, 0, "Continuous"),
                       gen.const("SingleFrame",             int_t, 1, "SingleFrame"),
                       gen.const("MultiFrame",              int_t, 2, "MultiFrame"),
                       gen.const("Recorder",                int_t, 3, "Recorder")],
                     "AcquisitionMode")

exposure_auto_mode = gen.enum([
                       gen.const("ExposureAutoAdjustTol",   int_t, 0, "ExposureAutoAdjustTol"),
                       gen.const("ExposureAutoAlg",         int_t, 1, "ExposureAutoAlg"),
                       gen.const("ExposureAutoMax",         int_t, 2, "ExposureAutoMax"),
                       gen.const("ExposureAutoMin",         int_t, 3, "ExposureAutoMin"),
                       gen.const("ExposureAutoOutliers",    int_t, 4, "ExposureAutoOutliers"),
                       gen.const("ExposureAutoRate",        int_t, 5, "ExposureAutoRate"),
                       gen.const("ExposureAutoTarget",      int_t, 6, "ExposureAutoTarget")],
                     "ExposureAutoMode")

exposure_mode = gen.enum([
                       gen.const("Manual",                  int_t, 0, "Manual"),
                       gen.const("AutoOnce",                int_t, 1, "AutoOnce"),
                       gen.const("Auto",                    int_t, 2, "Auto"),
                       gen.const("External",                int_t, 3, "External")],
                     "ExposureMode")

gain_auto_mode = gen.enum([
                       gen.const("GainAutoAdjustTol",       int_t, 0, "GainAutoAdjustTol"),
                       gen.const("GainAutoMax",             int_t, 1, "GainAutoMax"),
                       gen.const("GainAutoMin",             int_t, 2, "GainAutoMin"),
                       gen.const("GainAutoOutliers",        int_t, 3, "GainAutoOutliers"),
                       gen.const("GainAutoRate",            int_t, 4, "GainAutoRate"),
                       gen.const("GainAutoTarget",          int_t, 5, "GainAutoTarget")],
                     "GainAutoMode")

gain_mode = gen.enum([
                       gen.const("Manual",                  int_t, 0, "Manual"),
                       gen.const("AutoOnce",                int_t, 1, "AutoOnce"),
                       gen.const("Auto",                    int_t, 2, "Auto")],
                     "GainMode")

pixel_format = gen.enum([
                       gen.const("Mono8",                   int_t, 0, "Mono8"),
                       gen.const("Bayer8",                  int_t, 1, "Bayer8"),
                       gen.const("Bayer16",                 int_t, 2, "Bayer16"),
                       gen.const("Rgb24",                   int_t, 3, "Rgb24"),
                       gen.const("Bgr24",                   int_t, 4, "Bgr24"),
                       gen.const("Rgba32",                  int_t, 5, "Rgba32"),
                       gen.const("Bgra32",                  int_t, 6, "Bgra32")],
                     "PixelFormat")

white_balance_mode = gen.enum([
                       gen.const("Manual",                  int_t, 0, "Manual"),
                       gen.const("Auto",                    int_t, 1, "Auto"),
                       gen.const("AutoOnce",                int_t, 2, "AutoOnce")],
                     "WhiteBalanceMode")

acquisition = gen.add_group("Acquisition")
acquisition.add("acquisition_mode",         int_t, 0,       "AcquisitionMode",        0, 0, 3, edit_method=acquisition_mode)

controls = gen.add_group("Controls")

exposure = controls.add_group("Exposure")
exposure.add("exposure_value",                int_t, 0,       "ExposureValue",          2699,  45, 60000000)
exposure.add("exposure_mode",                 int_t, 0,       "ExposureMode",           2, 0, 3, edit_method=exposure_mode)
exposure_auto = exposure.add_group("Auto")
exposure_auto.add("exposure_auto_adjust_tol", int_t, 0,       "ExposureAutoAdjustTol",  5, 0, 50)
exposure_auto.add("exposure_auto_alg",        int_t, 0,       "ExposureAutoAlg",        0, 0, 1, edit_method=exposure_auto_alg_mode)
exposure_auto.add("exposure_auto_min",        int_t, 0,       "ExposureAutoMin",        45, 45, 60000000)
exposure_auto.add("exposure_auto_max",        int_t, 0,       "ExposureAutoMax",        500000, 45, 60000000)
exposure_auto.add("exposure_auto_outliers",   int_t, 0,       "ExposureAutoOutliers",   0, 0, 1000)
exposure_auto.add("exposure_auto_rate",       int_t, 0,       "ExposureAutoRate",       20, 1, 100)
exposure_auto.add("exposure_auto_target",     int_t, 0,       "ExposureAutoTarget",     25, 0, 100)

gain = controls.add_group("Gain")
gain_auto = gain.add_group("Auto")
gain_auto.add("gain_auto_adjust_tol",     int_t, 0,       "GainAutoAdjustTol",      5, 0, 50)
gain_auto.add("gain_auto_min",            int_t, 0,       "GainAutoMin",            0, 0, 32)
gain_auto.add("gain_auto_max",            int_t, 0,       "GainAutoMax",            32, 0, 32)
gain_auto.add("gain_auto_outliers",       int_t, 0,       "GainAutoOutliers",       0, 0, 1000)
gain_auto.add("gain_auto_rate",           int_t, 0,       "GainAutoRate",           100, 1, 100)
gain_auto.add("gain_auto_target",         int_t, 0,       "GainAutoTarget",         50, 0, 100)
gain.add("gain_mode",                     int_t, 0,       "GainMode",               0, 0, 2, edit_method=gain_mode)
gain.add("gain_value",                    int_t, 0,       "GainValue",              26, 26, 32)

controls.add("gamma",           double_t, 0,    "Gamma",                  1.0, 0, 1.0)
controls.add("hue",             double_t, 0,    "Hue",                    0, -40, 40)
controls.add("saturation",      double_t, 0,    "Saturation",             1.0, 0, 2)

white_balance = controls.add_group("WhiteBalance")
white_balance_auto = white_balance.add_group("Auto")
white_balance_auto.add("white_balance_auto_adjust_tol",  int_t, 0,       "WhitebalAutoAdjustTol",  5, 0, 50)
white_balance_auto.add("white_balance_auto_rate",        int_t, 0,       "WhitebalAutoRate",       100, 1, 100)
white_balance.add("white_balance_mode",                  int_t, 0,       "WhiteBalanceMode",       0, 0, 2, edit_method=white_balance_mode)
white_balance.add("white_balance_blue",                  int_t, 0,       "WhiteBalBlue",           300, 80, 300)
white_balance.add("white_balance_red",                   int_t, 0,       "WhiteBalRed",            131, 80, 300)

image_format = gen.add_group("ImageFormat")
roi = image_format.add_group("ROI")
roi.add("region_x",              int_t, 0,       "RegionX",                0,    0, 1292)
roi.add("region_y",              int_t, 0,       "RegionY",                0,    0, 734)
roi.add("width",                 int_t, 0,       "Width",                  1292, 0, 1292)
roi.add("height",                int_t, 0,       "Height",                 734,  0, 734)

image_format.add("pixel_format", int_t, 0,       "PixelFormat",            4, 0, 6, edit_method=pixel_format)

exit(gen.generate(PACKAGE, "capra_camera", "Camera"))